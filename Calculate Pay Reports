# 4

# define weekly pay
def calculate_weekly_pay(self):
  return self.hours * self.pay_rate

# calculate pay report
def generate_pay_report(caregivers):
  weekly_total = 0
  monthly_total = 0
  report_lines = ["Pay Report:"]
  for cargiver in caregivers:
    weekly_pay = cargiver.calculate_weekly_pay()
    weekly_total += weekly_pay
    monthly_total += weekly_pay * 4
    report_lines.append(
            f"{caregiver.name}: Weekly Gross Pay = ${weekly_pay:.2f} | Monthly Gross Pay = ${weekly_pay * 4:.2f}"
        )
    report_lines.append(f"\nWeekly Total Pay: ${weekly_total:.2f}")
    report_lines.append(f"Monthly Total Pay: ${monthly_total:.2f}")
    report_text = "\n".join(report_lines)

with open("pay_report.txt", "w") as file:
  file.write(report_text)
print("Pay report has been generated and saved as 'pay_report.txt'.")

if __name__ == '__main__':
    caregivers = [
        Caregiver('Aneesah', '123-456-7890', 'aneesah@example.com', 20),
        Caregiver('Maya', '987-654-3210', 'maya@example.com', 20),
        Caregiver('Zohair', '456-789-0123', 'zohair@example.com', 20),
        Caregiver('Caitlyn', '321-654-0987', 'caitlyn@example.com', 20),
        Caregiver('Violet', '654-321-9870', 'violet@example.com', 20),
    ]
year = int(input('Enter year: '))
month = int(input('Enter month (1-12): '))
schedule = care_schedule(caregivers, year, month)
cal_html(schedule, year, month)
generate_pay_report(caregivers)
